CREATE TABLE actors(
 actor_id SERIAL PRIMARY KEY,
 first_name VARCHAR (50) NOT NULL,
 last_name VARCHAR (100) NOT NULL,
 age DATE NOT NULL,
 number_oscars SMALLINT NOT NULL
);

SELECT * FROM actors;
SELECT last_name FROM actors WHERE first_name != 'Matt' ;


INSERT INTO actors (first_name, last_name, age, number_oscars)
VALUES('Matt','Damon','08/10/1970', 15), ('Leo','Burnett','08/10/1970', 52),('Tom','Hanks','08/10/1970', 5);

SELECT * FROM actors WHERE last_name LIKE '%mon%'; //words containing 'mon'

SELECT * FROM actors WHERE age > '1960-01-01' LIMIT 3 OFFSET 2; //limit 3 no. of entries after 2 records

SELECT * FROM actors WHERE age > '1960-01-01' ORDER BY first_name ASC //or DESC

SELECT avg(number_oscars) AS average_number_oscars FROM actors;

SELECT DISTINCT first_name FROM actors ORDER BY first_name DESC;

SELECT * FROM actors WHERE first_name not in ('Matt','Lea','Davis');

select first_name,last_name from employees where hire_date between '1/1/1987' and '31/12/1987'

SELECT first_name, last_name, sum(number_oscars) FROM actors GROUP BY first_name, last_name;

SELECT first_Name ||' '|| last_name as "Name", salary from employees order by salary asc

SELECT first_name from employees where first_name not ilike '%[0-9]%'

UPDATE actors SET age='1970-01-01' WHERE first_name='Matt' AND last_name='Damon';

DELETE FROM actors WHERE actor_id=4

ALTER TABLE table_name ADD COLUMN new_column_name TYPE;
DROP TABLE IF EXISTS table_name;


CREATE TABLE movies(
movie_id SERIAL,
movie_title VARCHAR (50) NOT NULL,
movie_story TEXT,
actor_playing_id INTEGER,
PRIMARY KEY (movie_id),
FOREIGN KEY (actor_playing_id) REFERENCES actors (actor_id)
);

SELECT actors.first_name, actors.last_name, movies.movie_title
FROM actors
INNER JOIN movies
ON actors.actor_id = movies.actor_playing_id; //replace inner to LEFT OUTER, RIGHT OUTER and FULL OUTER

CREATE TABLE cars(
car_id SERIAL PRIMARY KEY,
car_name TEXT,
car_color INTEGER REFERENCES colors (color_id) ON DELETE CASCADE, //delete all data from corresponding tables. alt DELETE RESTRICT -> i'll not delete
);

output to json
SELECT row_to_json(people) FROM people

SELECT json_agg(row_to_json(public.pincodedetails))
FROM public.pincodedetails

COPY (
  SELECT json_agg(row_to_json(public.pincodedetails)) :: text
  FROM public.pincodedetails
  WHERE meaning_of_life = 42;
) to '/path/to/some/file.json';



